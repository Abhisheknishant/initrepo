This is an example on how to run `ginkgo` - an `BDD` style testcases, steps are listed below,

- install `ginkgo` and `gomega` in your $GOPATH dir.
  * go get github.com/onsi/ginkgo/ginkgo
  * go get github.com/onsi/gomega/...

- copy the `user` directory to your $GOPATH dir.
  * `user_suite_test.go` is generated by `ginkgo bootstrap`
  * create a separate testf file with command `ginkgo generate user` which will create a file named as `user_test.go`
  * fill in your test specs in the new test file `user_test.go` (`user_test.go` is been provided as an example)

- run testcases with `go test` or `ginkgo`
  ```
  //run all the specs
  # ginkgo
  Running Suite: User Suite
  =========================
  Random Seed: 1576058621
  Will run 4 of 4 specs
  
  ••••
  Ran 4 of 4 Specs in 0.000 seconds
  SUCCESS! -- 4 Passed | 0 Failed | 0 Pending | 0 Skipped
  PASS
  
  Ginkgo ran 1 suite in 919.510332ms
  Test Suite Passed

  //focus on part of the specs, value of `focus` is a regex and could
  //be used to filter on the `Describe` and `Context` (containers) or
  //the `It`
  # ginkgo --focus="With a first and last name"
  Running Suite: User Suite
  =========================
  Random Seed: 1576058735
  Will run 1 of 4 specs
  
  •SSS
  Ran 1 of 4 Specs in 0.001 seconds
  SUCCESS! -- 1 Passed | 0 Failed | 0 Pending | 3 Skipped
  PASS
  
  Ginkgo ran 1 suite in 907.88274ms
  Test Suite Passed
  ```

---
reference:
[1] https://onsi.github.io/ginkgo/
[2] https://blog.gopheracademy.com/advent-2013/ginkgo/
 


